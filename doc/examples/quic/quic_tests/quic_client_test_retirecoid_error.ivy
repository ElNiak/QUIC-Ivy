#lang ivy1.7

include order
include quic_connection
include quic_infer
include file
include quic_shim
include quic_locale
include quic_client

#########################
# TODO
#########################


#
# Restrict generation to packets from the designated client endpoints
# to the server endpoint.

before packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
    if _generating {
        require client.ep.addr ~= 0;  # must have a client address to send to
        require src = server.ep;
        require dst = client.ep;
        require pkt.token.end = 0; 
    };
    require pkt.long -> pkt.pversion = 0xff00001b  #version 27
}


#  An endpoint cannot send this frame if it was provided with a zero-
#   length connection ID by its peer.  An endpoint that provides a zero-
#   length connection ID MUST treat receipt of a RETIRE_CONNECTION_ID
#   frame as a connection error of type PROTOCOL_VIOLATION.

before frame.retire_connection_id.handle(f:frame.retire_connection_id,scid:cid,dcid:cid) {
    if _generating {
        require scid = the_cid;
        require scid = 0 | dcid = 0;
    }
}

# The protocol specification describes all the events occurring the
# system at all protocol layers. When constructing the test mirror,
# however, we need to generate only events that are outputs of the
# environment. Ivy doesn't have any built-in mechanism to do this,
# so we have to add a constraint to every generated action. 
#
# We also add other pre-conditions to the actions to try to restrict
# them to relevant parameter values. 
#
# To restrict the generated events, we use the built-in predicate
# "_generating" that is true if this is a generated event.
#
# This is the mirror constraint for the stream frame protocol. We add
# some requirements to make the tests more interesting. In particular,
# we don't want the tester to produce lots of tiny frames (or empty
# ones) so we require that a stream frame send all of the available
# stream data. 
#
# TODO: We reuquire tje `off` and `len` bits to be true. Maybe these should
# determined in the low-level packet encoding stage.

before frame.stream.handle(f:frame.stream,scid:cid,dcid:cid,e:quic_packet_type) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        #before: require cid_dst_to_src_set(the_cid) & dcid = cid_dst_to_src(the_cid);
        require connected(the_cid) & dcid = connected_to(the_cid);
        # TEMPORARY: only send on client-initiated streams
        require get_stream_role(f.id) = role.client & get_stream_kind(f.id) = bidir;
        require f.len & f.off; # TODO: when can f.off be false? We make len true here, since len=false implies last fram of packet.
#        require ~f.fin; # TEMPORARY
        require f.length > 0;
        call show_level_offset_length(e,f.offset,stream_length(dcid,f.id));
        require f.offset = stream_length(dcid,f.id);
        require f.length = (stream_app_data_end(dcid,f.id)) - f.offset;
        # require ~f.fin;  # TODO: should allow fin after handshake is complete, or never?
    }
}

# We have something similar for crypto frames
#
# TEMPORARY: we require the server to send crypto frames in order of encryption level from initial to
# handshake to 1rtt. This is because we are prohibiting retransmissions, so an early-arriving handshake
# frame would be dropped because keys are not available and then permanently lost [1]. (nb:chris: other before)

before frame.crypto.handle(f:frame.crypto,scid:cid,dcid:cid,e:quic_packet_type) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        require f.length > 0;
#        call show_level_offset_length(e,crypto_length(scid,e),crypto_data_end(src,scid,e))
        require f.offset = crypto_length(scid,e);
        require f.length = (crypto_data_end(scid,e)) - f.offset;
        require e = quic_packet_type.handshake -> crypto_length(scid,quic_packet_type.initial) = crypto_data_end(scid,quic_packet_type.initial);  # [1]
        require e = quic_packet_type.one_rtt -> crypto_length(scid,quic_packet_type.initial) = crypto_data_end(scid,quic_packet_type.initial);  # [1]
        require e = quic_packet_type.one_rtt -> crypto_length(scid,quic_packet_type.handshake) = crypto_data_end(scid,quic_packet_type.handshake);  # [1]
    }
}

# Generate ack frames only for the client.

before frame.ack.handle(f:frame.ack,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        force_new_ack := true;
    }
}

# Generate rst_stream frames only for the client.

before frame.rst_stream.handle(f:frame.rst_stream,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        require f.id = 4;
    }
}

# Generate stop_sending frames only for the client.

before frame.stop_sending.handle(f:frame.stop_sending,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;       
        require scid = the_cid;
        require f.id = 4;
    }
}

# Generate max_streams frames only for the client.

before frame.max_streams.handle(f:frame.max_streams,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
    }
}

# Generate connection_close frames only for the client.

before frame.connection_close.handle(f:frame.connection_close,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;         
        require scid = the_cid;
    } else {
        require is_protocol_violation
    }
}

# Generate connection_close frames only for the client.

before frame.application_close.handle(f:frame.application_close,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
    }
}

# Generate max_stream_data frames only for the client.

before frame.max_stream_data.handle(f:frame.max_stream_data,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        require 4 <= f.id & f.id <= 16;
    }
}

# Generate stream_data_blocked frames only for the client.

before frame.stream_data_blocked.handle(f:frame.stream_data_blocked,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        require f.id = 4;
    }
}


# Generate max_data frames only for the client.

before frame.max_data.handle(f:frame.max_data,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
    }
    else {
        require ~(max_data_set(scid) & max_data_val(scid) > f.pos);
        var tp := trans_params(scid);
        if initial_max_data.is_set(tp) {
# TEMORARY: commented out until fixed
#            require initial_max_data.value(tp).stream_pos_32 <= f.pos;
        }
    }
}

# This is where we restrict the client to send only a specific HTTP
# request.  We allow generating application data at the client end
# only if the previous data have not been sent. This is to avoid
# building up a long queue. We only send the http request data read
# from the input file, up to the first newline. We restrict the client
# to use stream id's from 4 to 60 in increments of 4.

action client_send_event(src:ip.endpoint, dst:ip.endpoint, dcid:cid, s : stream_id, end : stream_pos)

var current_stream : stream_id

after init {
    current_stream := 4
}

around client_send_event {
    require stream_seen(dcid,s); # TODO: wait until client request is finished?
    require src = server.ep;
    require dst = client.ep;
    #require cid_dst_to_src_set(the_cid) & dcid = cid_dst_to_src(the_cid);
    require connected(the_cid) & dcid = connected_to(the_cid);
    require stream_length(dcid,s) = stream_app_data_end(dcid,s);
    require stream_length(dcid,s) < http_response.end;
    ...
    var data := http_response.segment(stream_length(dcid,s),http_response.end);
#    call app_send_event(src,dst,dcid,s,data,end = http_request.end);
    call app_send_event(src,dst,dcid,s,data,stream_length(dcid,s),true);
}

# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_response.handle
export packet_event
export client_send_event
export tls_recv_event

export frame.streams_blockeds.handle
#export frame.new_connection_id.handle
#export frame.retire_connection_id.handle
#export frame.rst_stream.handle
#export frame.max_stream_id.handle
#export frame.connection_close.handle
#export frame.max_stream_data.handle

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    require is_protocol_violation;
}


