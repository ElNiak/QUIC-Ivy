#lang ivy1.7

include order
include quic_connection
include quic_infer
include file
include quic_shim
include quic_locale
include random_value

parameter the_cid : cid = 0xd
parameter server_addr : ip.addr = 0x7f000001
parameter server_port : ip.port = 4443
parameter max_stream_data : stream_pos = 0x2000
parameter initial_max_streams_bidi : stream_id = 2

# Network setup
# -------------
#
# To test the server over the OS sockets layer, we need some setup. We must
# establish which interface and which ports the tester will use. 
#
# create an UDP network instance to communicate to server with
# Note: because of packet coalescing, a single UDP datagram contains
# an array of QUIC packets.

# Our test network has two endpoints: one for the client and one for the server
# We use this type as a host id. There are two client host ids so we
# can model migration.

object endpoint_id = {
    type this = {client, server}
}

# Map test endpoint ids to the ip endpoints

# parameter server_addr: ip.addr

# server_addr=0xc0a80101 client_addr=0xc0a80102

action endpoint_id_addr(ep_id : endpoint_id) returns(ep:ip.endpoint)= {
    ep.protocol := ip.udp;
    ep.addr := server_addr if ep_id = endpoint_id.server else 0;
    ep.port := server_port if ep_id = endpoint_id.server else 0;
}    

module quic_endpoint(ep_id) = {
    var ep : ip.endpoint
    var tls_id : tls_api.id
    var enc_level : quic_packet_type
    after init {
	    ep := endpoint_id_addr(ep_id);
        enc_level := quic_packet_type.initial;
    }
}
    
# create a client and server. the server has an instance of TLS

instance client : quic_endpoint(endpoint_id.client)
instance server : quic_endpoint(endpoint_id.server)

# An ip endpoint for the client to migrate to. TODO

# a socket for the server

var sock : net.socket

instance tls_extensions : vector(tls.extension)

# Open a server socket to listen on and create an instance of TLS.
# TODO: we should have one instance of TLS per connection

after init {
    sock := net.open(endpoint_id.server,server.ep);
    server.tls_id := 0;
    var extns := tls_extensions.empty;
    extns := extns.append(make_transport_parameters);
    call tls_api.upper.create(0,true,extns);  # 'true' means this instance of tls is a server
}

# Here we have a bunch of conversions that map between cid's, IP
# endpoints, TLS instances and host ids. TODO: This is a mess and
# should be done in a more systematic way.

# Get the host id associated to an ip endpoint. 

action endpoint_to_pid(src:ip.endpoint) returns (pid:endpoint_id) = {
    pid := endpoint_id.server;
}

# Get the IP endpoint associated to a host id and socket number.

action socket_endpoint(host:endpoint_id,s:net.socket) returns (src:ip.endpoint) = {
    src := server.ep;
}
    
# Get the socket number associated to an IP endpoint.

action endpoint_to_socket(src:ip.endpoint) returns (socket:net.socket) = {
    socket := sock;
}

# Get the source IP endpoint associated to a TLS instance
# TODO: this shouldn't be needed.

action tls_id_to_src(tls_id:tls_api.id) returns (src:ip.endpoint) = {
    src := client.ep if tls_id = client.tls_id else server.ep;
}

# Get the destination IP endpoint associated to a TLS instance
# TODO: this shouldn't be needed.

action tls_id_to_dst(tls_id:tls_api.id) returns (dst:ip.endpoint) = {
    dst := server.ep if tls_id = client.tls_id else client.ep;
}

# Get cid associated to a TLS instance

action tls_id_to_cid(tls_id:tls_api.id) returns (scid:cid) = {
    scid := the_cid;
}

# Returns true if an IP endpoint is controlled by the generator.
# TODO: shouldn't be needed.

action dst_is_generated(dst:ip.endpoint) returns (res:bool) = {
    res := dst = server.ep
}

# Returns the TLS instance associated to a destination IP endppoint.
# TODO: shouldn't be needed.

action dst_tls_id(dst:ip.endpoint) returns (tls_id:tls_api.id) = {
    tls_id := server.tls_id
}

#
# Client HTTP response
# ===================
#
# Since we are testing an HTTP client, we need to make a sensible HTTP
# response, rather than just sendin random bytes, in order to get a response.
# Here, we read the HTTP response from a file:
#

# read a data file to send to client (it sends the same response to every request!)

var http_response : stream_data
instance http_response_file : binary_input_file(stream_data,cid)

after init {
    http_response := http_response_file.read;
}

# This selects the client's nonce CID

# after init {
#     nonce_cid(the_cid) := the_cid;
# }


# HACK: we fix the initial client transport parameters here
function client_initial_scid : cid
function client_initial_dcid : cid

action make_transport_parameters returns (tp:quic_transport_parameters) = {
    #tp.initial_version := 0xff000017;
    #tp.versions := tp.versions.append(0xff000017);
    #tp.versions := tp.versions.append(0x49565931);  # IVY1
    var imsdbl : initial_max_stream_data_bidi_local;
    imsdbl.stream_pos_32 := max_stream_data;
    var imd : initial_max_data;
    imd.stream_pos_32 := random_stream_pos(0,0xFFFFFFF);
    var it : max_idle_timeout;
    it.seconds_16 := random_microsecs(0,0xFFFFFFF);
    var imsdbr : initial_max_stream_data_bidi_remote;
    imsdbr.stream_pos_32 := max_stream_data;
    var imsdu : initial_max_stream_data_uni;
    imsdu.stream_pos_32 := random_stream_pos(1,0xFFFFFFF);

    tp.transport_parameters := tp.transport_parameters.append(imsdbl);
    tp.transport_parameters := tp.transport_parameters.append(imd);
    tp.transport_parameters := tp.transport_parameters.append(it);
    tp.transport_parameters := tp.transport_parameters.append(imsdbr);
    tp.transport_parameters := tp.transport_parameters.append(imsdu);
    # TEMPORARY: a missing numeric parameter should be treated as zero,
    # but some clients don't handle this correctly, so we put all parameters in.
    # Remove the following to test this client behavior.
    var imsib : initial_max_stream_id_bidi;
    imsib.stream_id_16 := initial_max_streams_bidi;
    tp.transport_parameters := tp.transport_parameters.append(imsib);

    var icid : initial_source_connection_id; #update v29
    icid.scid := client_initial_scid;
    tp.transport_parameters := tp.transport_parameters.append(icid);
    var odci : original_destination_connection_id; #update v29
    odci.dcid := client_initial_dcid;
    tp.transport_parameters := tp.transport_parameters.append(odci);

    # An endpoint MUST NOT send a parameter more than once in a given
    # transport parameters extension.  An endpoint SHOULD treat receipt of
    # duplicate transport parameters as a connection error of type
    # TRANSPORT_PARAMETER_ERROR.

    tp.transport_parameters := tp.transport_parameters.append(imsib);
}

attribute radix=16       # print in hex

interpret cid -> intbv[1][13][2]
interpret version -> bv[32]
interpret pkt_num -> bv[32]
interpret error_code -> bv[16]
interpret stream_id -> bv[16]
attribute frame.idx.cardinality = 1
attribute frame.ack.range.idx.cardinality = 1
attribute pkt_num.cardinality = 1
attribute stream_pos.cardinality = 4
#attribute ip.addr.override = bv[1]
#attribute ip.port.override = bv[1]

action show_tls_send_event(src:ip.endpoint, dst:ip.endpoint, scid:cid, dcid:cid, data:stream_data,
                           pos:stream_pos, e:quic_packet_type) = {}

import show_tls_send_event

# Print a packet on stdout. In the compiled tester importing `show_packet`
# causes calls to be logged to stdout.

action show_packet(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet)
import show_packet

import action show_level_offset_length(e:quic_packet_type,offset:stream_pos,length:stream_pos)

import action clear_packet(rnum:pkt_num,pkt:stream_data)
import action cipher_packet(pkt:stream_data)

import action show_stream(pkt:stream_data)

import action show_aead(level:tls_api.upper.level,pyld:stream_data,seq:pkt_num,auth:stream_data)

#
# Restrict generation to packets from the designated client endpoints
# to the server endpoint.

before packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
    if _generating {
        require client.ep.addr ~= 0;  # must have a client address to send to
        require src = server.ep;
        require dst = client.ep;
        require pkt.token.end = 0; 
    };
    require pkt.long -> pkt.pversion = 0xff00001d  #version 29
}

# The protocol specification describes all the events occurring the
# system at all protocol layers. When constructing the test mirror,
# however, we need to generate only events that are outputs of the
# environment. Ivy doesn't have any built-in mechanism to do this,
# so we have to add a constraint to every generated action. 
#
# We also add other pre-conditions to the actions to try to restrict
# them to relevant parameter values. 
#
# To restrict the generated events, we use the built-in predicate
# "_generating" that is true if this is a generated event.
#
# This is the mirror constraint for the stream frame protocol. We add
# some requirements to make the tests more interesting. In particular,
# we don't want the tester to produce lots of tiny frames (or empty
# ones) so we require that a stream frame send all of the available
# stream data. 
#
# TODO: We reuquire tje `off` and `len` bits to be true. Maybe these should
# determined in the low-level packet encoding stage.

before frame.stream.handle(f:frame.stream,scid:cid,dcid:cid,e:quic_packet_type) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        #before: require cid_dst_to_src_set(the_cid) & dcid = cid_dst_to_src(the_cid);
        require connected(the_cid) & dcid = connected_to(the_cid);
        # TEMPORARY: only send on client-initiated streams
        require get_stream_role(f.id) = role.client & get_stream_kind(f.id) = bidir;
        require f.len & f.off; # TODO: when can f.off be false? We make len true here, since len=false implies last fram of packet.
#        require ~f.fin; # TEMPORARY
        require f.length > 0;
        call show_level_offset_length(e,f.offset,stream_length(dcid,f.id));
        require f.offset = stream_length(dcid,f.id);
        require f.length = (stream_app_data_end(dcid,f.id)) - f.offset;
        # require ~f.fin;  # TODO: should allow fin after handshake is complete, or never?
    }
}

# We have something similar for crypto frames
#
# TEMPORARY: we require the server to send crypto frames in order of encryption level from initial to
# handshake to 1rtt. This is because we are prohibiting retransmissions, so an early-arriving handshake
# frame would be dropped because keys are not available and then permanently lost [1]. (nb:chris: other before)

before frame.crypto.handle(f:frame.crypto,scid:cid,dcid:cid,e:quic_packet_type) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        require f.length > 0;
#        call show_level_offset_length(e,crypto_length(scid,e),crypto_data_end(src,scid,e))
        require f.offset = crypto_length(scid,e);
        require f.length = (crypto_data_end(scid,e)) - f.offset;
        require e = quic_packet_type.handshake -> crypto_length(scid,quic_packet_type.initial) = crypto_data_end(scid,quic_packet_type.initial);  # [1]
        require e = quic_packet_type.one_rtt -> crypto_length(scid,quic_packet_type.initial) = crypto_data_end(scid,quic_packet_type.initial);  # [1]
        require e = quic_packet_type.one_rtt -> crypto_length(scid,quic_packet_type.handshake) = crypto_data_end(scid,quic_packet_type.handshake);  # [1]
    }
}

# Generate ack frames only for the client.

before frame.ack.handle(f:frame.ack,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        force_new_ack := true;
    }
}

# Generate rst_stream frames only for the client.

before frame.rst_stream.handle(f:frame.rst_stream,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        require f.id = 4;
    }
}

# Generate stop_sending frames only for the client.

before frame.stop_sending.handle(f:frame.stop_sending,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;       
        require scid = the_cid;
        require f.id = 4;
    }
}

# Generate max_streams frames only for the client.

before frame.max_streams.handle(f:frame.max_streams,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
    }
}

# Generate connection_close frames only for the client.

before frame.connection_close.handle(f:frame.connection_close,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;         
        require scid = the_cid;
    } else {
        require is_transport_parameter_error
    }
}

# Generate connection_close frames only for the client.

before frame.application_close.handle(f:frame.application_close,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
    }
}

# Generate max_stream_data frames only for the client.

before frame.max_stream_data.handle(f:frame.max_stream_data,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        require 4 <= f.id & f.id <= 16;
    }
}

# Generate stream_data_blocked frames only for the client.

before frame.stream_data_blocked.handle(f:frame.stream_data_blocked,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        require f.id = 4;
    }
}

# Generate max_data frames only for the client.

before frame.max_data.handle(f:frame.max_data,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
    }
    else {
        require ~(max_data_set(scid) & max_data_val(scid) > f.pos);
        var tp := trans_params(scid);
        if initial_max_data.is_set(tp) {
# TEMORARY: commented out until fixed
#            require initial_max_data.value(tp).stream_pos_32 <= f.pos;
        }
    }
}

# This is where we restrict the client to send only a specific HTTP
# request.  We allow generating application data at the client end
# only if the previous data have not been sent. This is to avoid
# building up a long queue. We only send the http request data read
# from the input file, up to the first newline. We restrict the client
# to use stream id's from 4 to 60 in increments of 4.

action client_send_event(src:ip.endpoint, dst:ip.endpoint, dcid:cid, s : stream_id, end : stream_pos)

var current_stream : stream_id

after init {
    current_stream := 4
}

around client_send_event {
    require stream_seen(dcid,s); # TODO: wait until client request is finished?
    require src = server.ep;
    require dst = client.ep;
    #require cid_dst_to_src_set(the_cid) & dcid = cid_dst_to_src(the_cid);
    require connected(the_cid) & dcid = connected_to(the_cid);
    require stream_length(dcid,s) = stream_app_data_end(dcid,s);
    require stream_length(dcid,s) < http_response.end;
    ...
    var data := http_response.segment(stream_length(dcid,s),http_response.end);
#    call app_send_event(src,dst,dcid,s,data,end = http_request.end);
    call app_send_event(src,dst,dcid,s,data,stream_length(dcid,s),true);
}

# The actions listed below will be generated by the mirror.
#
# Note: some of these are commented out. They are added in other files
# that include this one.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_response.handle
export packet_event
export client_send_event
export tls_recv_event
#export frame.new_connection_id.handle
#export frame.retire_connection_id.handle
#export frame.rst_stream.handle
#export frame.max_stream_id.handle
#export frame.connection_close.handle
#export frame.max_stream_data.handle

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    require is_transport_parameter_error;
}


