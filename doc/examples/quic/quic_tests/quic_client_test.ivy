#lang ivy1.7

include order
include quic_packet
include quic_connection
include quic_deser
include quic_ser
include quic_infer
include tls_msg
include udp_impl
include serdes
include quic_protection
include file

# This is a simple tester for quic clients.
#
# The tester plays the role of a single server.
#
# Compile the tester like this:
#
#     ivyc target=test quic_server_test.ivy
#
# Run it like this:
#
#     ./quic_server_test [parameter=value...]
#
# Parameters are:
#
#     the_cid:int      cid to be used by the server
#     server_addr:int  the server IP address (default 0x7f000001, i.e., the loopback interface)
#     server_port:int  the server port number (default 4443)
#     max_stream_data:int     the initial max stream data (0x2000)
#

# Notes:
#
# - All IP addresses are IPv4 and are given as single 32-bit numbers,
#   rather than using the dot notation.



# create an UDP network instance to communicate to server with
# Note: because of packet coalescing, a single UDP datagram contains
# an array of QUIC packets.

# Our test network has two endpoints: one for the client and one for the server

object endpoint_id = {
    type this = {client,server}
}

# The parameters

parameter the_cid : cid = 0xd
parameter server_addr : ip.addr = 0x7f000001
parameter server_port : ip.port = 4443
parameter max_stream_data : stream_pos = 0x2000
parameter initial_max_streams_bidi : stream_id = 2

# read a data file to send to client (it sends the same response to every request!)

var http_response : stream_data
instance http_response_file : binary_input_file(stream_data,cid)

after init {
    http_response := http_response_file.read;
}

instance tls_extensions : vector(tls.extension)

# HACK: we fix the initial client transport parameters here

action make_transport_parameters returns (tp:quic_transport_parameters) = {
    tp.initial_version := 0xff000017;
    tp.versions := tp.versions.append(0xff000017);
    tp.versions := tp.versions.append(0x49565931);  # IVY1
    var imsdbl : initial_max_stream_data_bidi_local;
    imsdbl.stream_pos_32 := max_stream_data;
    var imd : initial_max_data;
    imd.stream_pos_32 := 0x4000;
    var it : idle_timeout;
    it.seconds_16 := 60;
    var imsdbr : initial_max_stream_data_bidi_remote;
    imsdbr.stream_pos_32 := max_stream_data;
    var imsdu : initial_max_stream_data_uni;
    imsdu.stream_pos_32 := 0x2000;
    tp.transport_parameters := tp.transport_parameters.append(imsdbl);
    tp.transport_parameters := tp.transport_parameters.append(imd);
    tp.transport_parameters := tp.transport_parameters.append(it);
    tp.transport_parameters := tp.transport_parameters.append(imsdbr);
    tp.transport_parameters := tp.transport_parameters.append(imsdu);
    # TEMPORARY: a missing numeric parameter should be treated as zero,
    # but some clients don't handle this correctly, so we put all parameters in.
    # Remove the following to test this client behavior.
    var imsib : initial_max_stream_id_bidi;
    imsib.stream_id_16 := initial_max_streams_bidi;
    tp.transport_parameters := tp.transport_parameters.append(imsib);
}

# Instantiate a TLS implementation. The `id` type identifies a
# particular instance of the TLS protocol. Notice that, since we are a
# server, we use the special serializer `tls_ser_server` to serialize
# the transport parameters TLS extension. This uses a slightly
# different format with an extra field "versions". Note, the TLS deserializer
# knows which format to use, because server transport parameters are always
# inside a TLS `encrypted_extensions` message, while the client's are
# in a `client_hello` message.

object botan = {
    instance id : unbounded_sequence
    instance lower : tls_lower_intf(id,stream_data)
    instance upper : tls_intf(id,stream_pos,stream_data,lower,tls_extensions,tls_ser_server,pkt_num)
}    

instance prot : quic_protection(botan.id,botan.upper)

instance net : udp_impl(endpoint_id,prot.arr,quic_prot_ser,quic_prot_deser)

# Map test endpoint ids to the ip endpoints

# parameter server_addr: ip.addr

# server_addr=0xc0a80101 client_addr=0xc0a80102

action endpoint_id_addr(ep_id : endpoint_id) returns(ep:ip.endpoint)= {
    ep.protocol := ip.udp;
    ep.addr := server_addr if ep_id = endpoint_id.server else 0;
    ep.port := server_port if ep_id = endpoint_id.server else 0;
}    

module quic_endpoint(ep_id) = {
    var ep : ip.endpoint
    var tls_id : botan.id
    var enc_level : encryption_level
    after init {
	ep := endpoint_id_addr(ep_id);
        enc_level := encryption_level.initial;
    }
}
    
# create a client and server. the server has an instance of TLS

instance client : quic_endpoint(endpoint_id.client)
instance server : quic_endpoint(endpoint_id.server)

# a socket for the server

var sock : net.socket

# Open a server socket to listen on and create an instance of TLS.
# TODO: we should have one instance of TLS per connection

after init {
    sock := net.open(endpoint_id.server,server.ep);
    server.tls_id := 0;
    var extns := tls_extensions.empty;
    extns := extns.append(make_transport_parameters);
    call botan.upper.create(0,true,extns);  # 'true' means this instance of tls is a server
}

# Hook up tls to quic

# When the local TLS sends message data, we generate a `tls_send_event`. This causes
# the data to be recorded in the appropriate abstract crypto stream, and later to be
# transmitted via a generated crypto frame event. 

implement botan.lower.send(tls_id:botan.id,bytes:stream_data) {
    var e := encryption_level.initial if lev = 0 else (encryption_level.handshake if lev = 2 else encryption_level.other);
    if tls_id = server.tls_id {
        call tls_send_event(server.ep, client.ep, the_cid, 0, bytes,
                            crypto_data_end(the_cid,e), e);
    }
}

after tls_send_event(src:ip.endpoint, dst:ip.endpoint, scid:cid, dcid:cid, data : stream_data,
                     pos:stream_pos, e:encryption_level) {
    call show_tls_send_event(src,dst,scid,dcid,data,pos,e);
}


implement botan.upper.keys_established(tls_id:botan.id,lev:botan.upper.level) {
    var e := encryption_level.handshake if lev = 2 else encryption_level.other;
    if tls_id = server.tls_id {
        call tls_keys_established_event(the_cid,e);
    }
}

after tls.handshake_data_event(src : ip.endpoint, dst : ip.endpoint, data:stream_data) {
    # When TLS handshake data is conceputally transferred from the server to the client,
    # we feed it to the real TLS. We do it at this point because we may need it to generate the
    # keys for the next packet to be decrypted. Perhaps this should
    # happen on a `tls_recv_event`, but that would be too late.
    if dst = server.ep {
        call botan.lower.recv(server.tls_id,data,0); # TODO: fill in the level
    }
}

# Assume that initial packets are sent only to the server under test

before packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
#    if pkt.hdr_type = 0x7f {
#        require dst = server.ep
#    };
    # TEMPORARY: all packets to server!
    if _generating {
        require client.ep.addr ~= 0;  # must have a client address to send to
        require src = server.ep;
        require dst = client.ep;
        require pkt.hdr_long -> pkt.dcid = 5 & pkt.scid = 5;
        require pkt.hdr_token_length = 0 & pkt.hdr_token.end = 0; 
        require cid_dst_to_src_set(pkt.hdr_cid);
    };
    require pkt.hdr_long -> pkt.hdr_version = 0xff000017
}

# Hook up to the remote server

# If this is an initial client request, we set up the initial keys
# based on the destination cid (which in principle is a random sequence
# of bytes. Note, the "salt" is specified in QUIC-TLS version 15, and is
# unchanged in version 16.

var initial_keys_set : bool
after init {
    initial_keys_set := false;
}

action on_initial_request(src:ip.endpoint,dst:ip.endpoint,spkt: stream_data) = {
    client.ep := src; # TODO: migration?
    if ~initial_keys_set {
        var lens := spkt.value(5);
        var dcil : stream_pos := bfe[4][7](lens);
        dcil := dcil + 3 if dcil ~= 0 else 0;
        var ikm := spkt.segment(6,6+dcil);
        var salt : stream_data := stream_data.empty;

        salt := salt.append(0xef);
        salt := salt.append(0x4f);
        salt := salt.append(0xb0);
        salt := salt.append(0xab);
        salt := salt.append(0xb4);
        salt := salt.append(0x74);
        salt := salt.append(0x70);
        salt := salt.append(0xc4);
        salt := salt.append(0x1b);
        salt := salt.append(0xef);
        salt := salt.append(0xcf);
        salt := salt.append(0x80);
        salt := salt.append(0x31);
        salt := salt.append(0x33);
        salt := salt.append(0x4f);
        salt := salt.append(0xae);
        salt := salt.append(0x48);
        salt := salt.append(0x5e);
        salt := salt.append(0x09);
        salt := salt.append(0xa0);
        call botan.upper.set_initial_keys(0,salt,ikm);
        initial_keys_set := true;
    }
}


action cid_to_bytes(c:cid,len:cid_length) returns(res:stream_data) = {
    <<<
    res.resize(len);
    for (unsigned i = 0; i < len; i++) {
        res[len-i-1] = 0xff & (c.val >> (i * 8));
    }
    >>>
}

# To estimate the sequence number of packets, we have to know the encryption level.
# This action gets the encryption level from the packet header.

action packet_encryption_level(h:prot.header_info) returns (e:encryption_level) = {
    e := encryption_level.other if ~h.hdr_long
            else (encryption_level.initial if h.hdr_type = 0x7f
                  else encryption_level.handshake);
}

# To get the reference packet number for a packet, we need to know the source connection
# id, which is not present in short packets. Here we get it from history.

action packet_scid(h:prot.header_info) returns (scid:cid) = {
    if h.hdr_long {
        scid := h.scid;
    } else {
        scid := cid_dst_to_src(h.dcid);
    }
}

# To encrypt and decrypt packets we need to know the true packet number, which
# must be inferred from truncated number in the packet and the packet number history.
# As a workaround, we use `last_pkt_num(scid,e)` where `e` is the
# encryption level. We infer the encryption level from the packet type.

action reference_pkt_num(spkt:stream_data) returns (pnum:pkt_num) = {
    var h := prot.get_header_info(spkt);
    var e := packet_encryption_level(h);
    var scid := packet_scid(h);
    pnum := last_pkt_num(scid,e);
}

# To send and receive packets, we need to serialize and deserialize them.
# This object allows that.

instance pkt_serdes : serdes(quic_packet,stream_data,quic_ser,quic_deser)

# When the server sends a packet, route it to the server on the socket
# corresponding to the ip endpoint, after first serializing it, then
# encrypting it. TODO: coalesce packets. As of now, we send only one
# QUIC packet per UDP datagram.

after packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
    if src = server.ep  {
        var spkt := pkt_serdes.to_bytes(pkt);
        var rnum := reference_pkt_num(spkt);
        call clear_packet(rnum,spkt);
        var ppkt := prot.encrypt(server.tls_id,rnum,spkt);
        call cipher_packet(ppkt);
        var pkts := prot.arr.empty;
        pkts := pkts.append(ppkt);
        call net.send(endpoint_id.server,sock,dst,pkts);
    }
}

# When an packet arrives at the server endpoint, decrypt it, deserialize it,
# then generate a `packet_event`.
#
# After receive a client initial packet, we open a connection, using
# our chosen CID [1]. This application-layer event could be generated,
# but since it occurs deterministically, we just infer it here.

implement net.recv(host:endpoint_id, s:net.socket, src:ip.endpoint, pkts:prot.arr) {
    if host = endpoint_id.server {
	var dst := server.ep;
        var idx := pkts.begin;
        while idx < pkts.end {
            var ppkt := pkts.value(idx);
            if bvand(ppkt.value(0),0xf0) = 0xc0 {
                call on_initial_request(src,dst,ppkt)
            };
            var rnum := reference_pkt_num(ppkt);
            call show_stream(ppkt);
            var res := prot.decrypt(server.tls_id,rnum,ppkt);
            call show_stream(res.data);
            if res.ok {
                var pkt := pkt_serdes.from_bytes(res.data);
                pkt.seq_num := prot.correct_packet_number(rnum,pkt.seq_num,get_pnum_len(res,0));
	        call show_packet(src,dst,pkt);
	        call infer_tls_events(src,dst,pkt);   # infer any TLS events on client side
	        call packet_event(src,dst,pkt);
                if bvand(ppkt.value(0),0xf0) = 0xc0 & ~cid_dst_to_src_set(the_cid) {
                    call app_server_open_event(dst,src,the_cid,pkt.hdr_cid);  # [1]
                }
            }
            else {
                call undecryptable_packet_event(src,dst,ppkt);
#                assert false;
            };
            idx := idx.next;
        }
    }
}

# TLS receive event handling
#
# When TLS data is received, at the server, we route it to the server's instance of TLS.
#
# Also, we require that all of the received data (from stream_pos up
# to stream_length) is transferred to TLS, otherwise, the data will be
# dribbled one byte at a time, which gets boring.
#


around tls_recv_event(src:ip.endpoint, dst:ip.endpoint, scid:cid, dcid:cid, e:encryption_level, lo : stream_pos, hi : stream_pos ) {
    require src = client.ep & dst = server.ep;
    require hi = crypto_length(scid,e);
    require e = encryption_level.handshake -> crypto_pos(dcid,encryption_level.initial) = crypto_length(scid,encryption_level.initial);
    require e = encryption_level.other -> crypto_pos(dcid,encryption_level.initial) = crypto_length(scid,encryption_level.initial);
    require e = encryption_level.other -> crypto_pos(dcid,encryption_level.handshake) = crypto_length(scid,encryption_level.handshake);
    require dcid = the_cid;
    ...
    var tls_id := server.tls_id;
    var data := stream_data.empty;
    # Fill in the message bytes
    var idx := lo;
    while idx < hi {
	data := data.append(crypto_data(scid,e).value(idx));
	idx := idx.next
    };
#    call botan.lower.recv(tls_id,data)
}
    
action hi_byte_pos(x:stream_pos) returns (res:byte) = {
    <<< res = (x >> 8) & 0xff; >>>
}

action lo_byte_pos(x:stream_pos) returns (res:byte) = {
    <<< res = x  & 0xff; >>>
}

# The protocol specification describes all the events occurring the system
# at all protocol layers. When we test, however, we need to divide the system
# into the part simulated by the tester and the part executed by the real code
# under test. In this case to onyl want the tester to play the role of a client
# at a particular network address.
#
# To accomplish this we add a precondition to the protocol events that
# restricts the parameter values in case we are running on behalf of
# the tester. We can determine this using the built-in predicate
# "_generating".

# This is the tester constraint for the stream frame protocol. We add some requirements
# to make the tests more interesting. In particular, we don't want the tester to
# produce lots of tiny frames (or empty ones) so we require that a stream frame
# send all of the available stream data. We never allow the fin bt to be set, since
# we don't really have good rules for this yet.

before frame.stream.handle(f:frame.stream,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid,e:encryption_level) {
    if _generating {
        require client.ep.addr ~= 0;
        require src = server.ep & dst = client.ep; 
        require scid = the_cid;
        require cid_dst_to_src_set(the_cid) & dcid = cid_dst_to_src(the_cid);
        # TEMPORARY: only send on client-initiated streams
        require get_stream_role(f.id) = role.client & get_stream_kind(f.id) = bidir;
        require f.len & f.off; # TODO: when can f.off be false? We make len true here, since len=false implies last fram of packet.
#        require ~f.fin; # TEMPORARY
        require f.length > 0;
        call show_level_offset_length(e,f.offset,stream_length(dcid,f.id));
        require f.offset = stream_length(dcid,f.id);
        require f.length = (stream_app_data_end(dcid,f.id)) - f.offset;
        # require ~f.fin;  # TODO: should allow fin after handshake is complete, or never?
    }
}

# We have something similar for crypto frames
#
# TEMPORARY: we require the server to send crypto frames in order of encryption level from initial to
# handshake to 1rtt. This is because we are prohibiting retransmissions, so an early-arriving handshake
# frame would be dropped because keys are not available and then permanently lost [1].

before frame.crypto.handle(f:frame.crypto,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid,e:encryption_level) {
    if _generating {
        require client.ep.addr ~= 0;
        require src = server.ep & dst = client.ep; 
        require scid = the_cid;
        require f.length > 0;
#        call show_level_offset_length(e,crypto_length(scid,e),crypto_data_end(src,scid,e))
        require f.offset = crypto_length(scid,e);
        require f.length = (crypto_data_end(scid,e)) - f.offset;
        require e = encryption_level.handshake -> crypto_length(scid,encryption_level.initial) = crypto_data_end(scid,encryption_level.initial);  # [1]
        require e = encryption_level.other -> crypto_length(scid,encryption_level.initial) = crypto_data_end(scid,encryption_level.initial);  # [1]
        require e = encryption_level.other -> crypto_length(scid,encryption_level.handshake) = crypto_data_end(scid,encryption_level.handshake);  # [1]
    }
}

# Generate ack frames only for the client.

before frame.ack.handle(f:frame.ack,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require src = server.ep & dst = client.ep; 
        require scid = the_cid;
        force_new_ack := true;
    }
}

# Generate rst_stream frames only for the client.

before frame.rst_stream.handle(f:frame.rst_stream,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require src = server.ep & dst = client.ep; 
        require scid = the_cid;
        require f.id = 4;
    }
}

# Generate stop_sending frames only for the client.

before frame.stop_sending.handle(f:frame.stop_sending,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require src = server.ep & dst = client.ep; 
        require scid = the_cid;
        require f.id = 4;
    }
}

# Generate max_stream_id frames only for the client.

before frame.max_stream_id.handle(f:frame.max_stream_id,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require src = server.ep & dst = client.ep; 
        require scid = the_cid;
    }
}

# Generate connection_close frames only for the client.

before frame.connection_close.handle(f:frame.connection_close,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require src = server.ep & dst = client.ep; 
        require scid = the_cid;
    } else {
        require f.err_code = 0
    }
}

# Generate connection_close frames only for the client.

before frame.application_close.handle(f:frame.application_close,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require src = server.ep & dst = client.ep; 
        require scid = the_cid;
    }
}

# Generate max_stream_id frames only for the client.

before frame.max_stream_data.handle(f:frame.max_stream_data,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require src = server.ep & dst = client.ep; 
        require scid = the_cid;
        require 4 <= f.id & f.id <= 16;
    }
}

# Generate max_stream_id frames only for the client.

before frame.stream_blocked.handle(f:frame.stream_blocked,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require src = server.ep & dst = client.ep; 
        require scid = the_cid;
        require f.id = 4;
    }
}

# Generate max_data frames only for the client.

before frame.max_data.handle(f:frame.max_data,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require src = server.ep & dst = client.ep; 
        require scid = the_cid;
    }
    else {
        require ~(max_data_set(scid) & max_data_val(scid) > f.pos);
        var tp := trans_params(scid);
        if initial_max_data.is_set(tp) {
# TEMORARY: commented out until fixed
#            require initial_max_data.value(tp).stream_pos_32 <= f.pos;
        }
    }
}

# We allow generating application data at the client end only if the previous data have
# not been sent. This is to avoid building up a long queue. TEMPORARY: we only generate data
# for stream id 0x4. TEMPORARY: we only send the http request data read from the input file.
# We always read up to a newline or the end-of-file, since some servers can't seem to handle partial
# lines.

action client_send_event(src:ip.endpoint, dst:ip.endpoint, dcid:cid, s : stream_id, end : stream_pos)

    
around client_send_event {
    require stream_seen(dcid,s); # TODO: wait until client request is finished?
    require src = server.ep;
    require dst = client.ep;
    require cid_dst_to_src_set(the_cid) & dcid = cid_dst_to_src(the_cid);
    require stream_length(dcid,s) = stream_app_data_end(dcid,s);
    require stream_length(dcid,s) < http_response.end;
    ...
    var data := http_response.segment(stream_length(dcid,s),http_response.end);
#    call app_send_event(src,dst,dcid,s,data,end = http_request.end);
    call app_send_event(src,dst,dcid,s,data,stream_length(dcid,s),true);
}

# Note, we don't need a tester precondition for packet protocol
# events, since the frame queue for the server end will always be
# empty. This is because server frames are only inferred in response to
# a server packet event, which immediately dequeues them.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_response.handle
export packet_event
export client_send_event
export tls_recv_event
#export frame.rst_stream.handle
#export frame.max_stream_id.handle
# export frame.connection_close.handle
#export frame.max_stream_data.handle

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    require conn_total_data(the_cid) > 0;
}

attribute radix=16       # print in hex

interpret cid -> intbv[1][13][2]
interpret version -> bv[32]
interpret pkt_num -> bv[32]
interpret error_code -> bv[16]
interpret stream_id -> bv[16]
attribute frame.idx.cardinality = 1
attribute frame.ack.block.idx.cardinality = 1
attribute pkt_num.cardinality = 1
attribute stream_pos.cardinality = 4
#attribute ip.addr.override = bv[1]
#attribute ip.port.override = bv[1]

action show_tls_send_event(src:ip.endpoint, dst:ip.endpoint, scid:cid, dcid:cid, data:stream_data,
                           pos:stream_pos, e:encryption_level) = {}

import show_tls_send_event

# Print a packet on stdout. In the compiled tester importing `show_packet`
# causes calls to be logged to stdout.

action show_packet(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet)
import show_packet

action undecryptable_packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:stream_data)
import undecryptable_packet_event

import action show_level_offset_length(e:encryption_level,offset:stream_pos,length:stream_pos)

import action clear_packet(rnum:pkt_num,pkt:stream_data)
import action cipher_packet(pkt:stream_data)

import action show_stream(pkt:stream_data)

import action show_aead(level:botan.upper.level,pyld:stream_data,seq:pkt_num,auth:stream_data)
