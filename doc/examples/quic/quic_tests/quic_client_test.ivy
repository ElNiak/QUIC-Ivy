#lang ivy1.7

include order
include quic_connection
include quic_infer
include file
include quic_shim
include quic_shim_client
include quic_locale
include quic_client

# This is a simple tester for quic clients.
#
# The tester plays the role of a single server.
#
# Compile the tester like this:
#
#     ivyc target=test quic_server_test.ivy
#
# Run it like this:
#
#     ./quic_server_test [parameter=value...]
#
# Parameters are:
#
#     the_cid:int      cid to be used by the server
#     server_addr:int  the server IP address (default 0x7f000001, i.e., the loopback interface)
#     server_port:int  the server port number (default 4443)
#     max_stream_data:int     the initial max stream data (0x2000)
#

# Notes:
#
# - All IP addresses are IPv4 and are given as single 32-bit numbers,
#   rather than using the dot notation.

# Assume that initial packets are sent only to the server under test

before packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
    if _generating {
        require client.ep.addr ~= 0;  # must have a client address to send to
        require src = server.ep;
        require dst = client.ep;
        # require pkt.long -> pkt.dst_cid = 5 & pkt.src_cid = 5;
        # require pkt.hdr_token_length = 0 & pkt.hdr_token.end = 0; 
        require pkt.token.end = 0; # [1]
        require connected(pkt.src_cid);
    	require pkt.long -> pkt.pversion = version_used;  #version 29
	    call show_version(version_used);
    } 
    else {
	    require pkt.long -> (pkt.pversion = 0xff00001d | pkt.pversion = 0xfaceb002);  #version 29
	    if pkt.long {
	    	version_used := pkt.pversion;
	    };
	    call show_version(version_used);
    }
}

# import action show_version(v:version)
    

# The protocol specification describes all the events occurring the system
# at all protocol layers. When we test, however, we need to divide the system
# into the part simulated by the tester and the part executed by the real code
# under test. In this case to onyl want the tester to play the role of a client
# at a particular network address.
#
# To accomplish this we add a precondition to the protocol events that
# restricts the parameter values in case we are running on behalf of
# the tester. We can determine this using the built-in predicate
# "_generating".

# This is the tester constraint for the stream frame protocol. We add some requirements
# to make the tests more interesting. In particular, we don't want the tester to
# produce lots of tiny frames (or empty ones) so we require that a stream frame
# send all of the available stream data. We never allow the fin bt to be set, since
# we don't really have good rules for this yet.

before frame.stream.handle(f:frame.stream,scid:cid,dcid:cid,e:quic_packet_type) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        #before: require cid_dst_to_src_set(the_cid) & dcid = cid_dst_to_src(the_cid);
        require connected(the_cid) & dcid = connected_to(the_cid);
        # TEMPORARY: only send on client-initiated streams
        require get_stream_role(f.id) = role.client & get_stream_kind(f.id) = bidir;
        require f.len & f.off; # TODO: when can f.off be false? We make len true here, since len=false implies last fram of packet.
#        require ~f.fin; # TEMPORARY
        require f.length > 0;
        call show_level_offset_length(e,f.offset,stream_length(dcid,f.id));
        require f.offset = stream_length(dcid,f.id);
        require f.length = (stream_app_data_end(dcid,f.id)) - f.offset;
        # require ~f.fin;  # TODO: should allow fin after handshake is complete, or never?
    }
}

# We have something similar for crypto frames
#
# TEMPORARY: we require the server to send crypto frames in order of encryption level from initial to
# handshake to 1rtt. This is because we are prohibiting retransmissions, so an early-arriving handshake
# frame would be dropped because keys are not available and then permanently lost [1]. (nb:chris: other before)

before frame.crypto.handle(f:frame.crypto,scid:cid,dcid:cid,e:quic_packet_type) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        require f.length > 0;
#        call show_level_offset_length(e,crypto_length(scid,e),crypto_data_end(src,scid,e))
        require f.offset = crypto_length(scid,e);
        require f.length = (crypto_data_end(scid,e)) - f.offset;
        require e = quic_packet_type.handshake -> crypto_length(scid,quic_packet_type.initial) = crypto_data_end(scid,quic_packet_type.initial);  # [1]
        require e = quic_packet_type.one_rtt -> crypto_length(scid,quic_packet_type.initial) = crypto_data_end(scid,quic_packet_type.initial);  # [1]
        require e = quic_packet_type.one_rtt -> crypto_length(scid,quic_packet_type.handshake) = crypto_data_end(scid,quic_packet_type.handshake);  # [1]
    }
}

# Generate ack frames only for the client.

before frame.ack.handle(f:frame.ack,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        force_new_ack := true;
    }
}

# Generate rst_stream frames only for the client.

before frame.rst_stream.handle(f:frame.rst_stream,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        require f.id = 4;
    }
}

# Generate stop_sending frames only for the client.

before frame.stop_sending.handle(f:frame.stop_sending,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;       
        require scid = the_cid;
        require f.id = 4;
    }
}

# Generate max_streams frames only for the client.

before frame.max_streams.handle(f:frame.max_streams,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
    }
}

# Generate connection_close frames only for the client.

before frame.connection_close.handle(f:frame.connection_close,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;         
        require scid = the_cid;
    } else {
        require is_no_error
    }
}

# Generate connection_close frames only for the client.

before frame.application_close.handle(f:frame.application_close,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
    }
}

# Generate max_stream_data frames only for the client.

before frame.max_stream_data.handle(f:frame.max_stream_data,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        require 4 <= f.id & f.id <= 16;
    }
}

# Generate stream_data_blocked frames only for the client.

before frame.stream_data_blocked.handle(f:frame.stream_data_blocked,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
        require f.id = 4;
    }
}

before frame.handshake_done.handle(f:frame.handshake_done,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
	    require tls_handshake_finished;
	    #require ~handshake_done_send;
	    #handshake_done_send := true; #Tricks, we should wait ack and restransmit
    }
}

# Generate max_data frames only for the client.

before frame.max_data.handle(f:frame.max_data,scid:cid,dcid:cid) {
    if _generating {
        require client.ep.addr ~= 0;
        require scid = the_cid;
    }
    else {
        require ~(max_data_set(scid) & max_data_val(scid) > f.pos);
        var tp := trans_params(scid);
        if initial_max_data.is_set(tp) {
# TEMORARY: commented out until fixed
#            require initial_max_data.value(tp).stream_pos_32 <= f.pos;
        }
    }
}

# We allow generating application data at the client end only if the previous data have
# not been sent. This is to avoid building up a long queue. TEMPORARY: we only generate data
# for stream id 0x4. TEMPORARY: we only send the http request data read from the input file.
# We always read up to a newline or the end-of-file, since some servers can't seem to handle partial
# lines.

action client_send_event(src:ip.endpoint, dst:ip.endpoint, dcid:cid, s : stream_id, end : stream_pos)
    
around client_send_event {
    require stream_seen(dcid,s); # TODO: wait until client request is finished?
    require src = server.ep;
    require dst = client.ep;
    #require cid_dst_to_src_set(the_cid) & dcid = cid_dst_to_src(the_cid);
    require connected(the_cid) & dcid = connected_to(the_cid);
    require stream_length(dcid,s) = stream_app_data_end(dcid,s);
    require stream_length(dcid,s) < http_response.end;
    ...
    var data := http_response.segment(stream_length(dcid,s),http_response.end);
#    call app_send_event(src,dst,dcid,s,data,end = http_request.end);
    call app_send_event(src,dst,dcid,s,data,stream_length(dcid,s),true);
}

# Note, we don't need a tester precondition for packet protocol
# events, since the frame queue for the server end will always be
# empty. This is because server frames are only inferred in response to
# a server packet event, which immediately dequeues them.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export frame.path_response.handle
export packet_event
export client_send_event
export tls_recv_event
#export frame.rst_stream.handle
#export frame.max_stream_id.handle
#export frame.connection_close.handle
#export frame.max_stream_data.handle

# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    require conn_total_data(the_cid) > 0;
}



