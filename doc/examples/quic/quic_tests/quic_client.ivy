#lang ivy1.7

include order
include quic_connection
include quic_infer
include file
include quic_shim
include quic_shim_client
include quic_locale
include random_value

parameter the_cid : cid = 0xdd
parameter server_addr : ip.addr = 0x7f000001
parameter server_port : ip.port = 4443
parameter max_stream_data : stream_pos = 0x2000
parameter initial_max_streams_bidi : stream_id = 10

# Network setup
# -------------
#
# To test the server over the OS sockets layer, we need some setup. We must
# establish which interface and which ports the tester will use. 
#
# create an UDP network instance to communicate to server with
# Note: because of packet coalescing, a single UDP datagram contains
# an array of QUIC packets.

# Our test network has two endpoints: one for the client and one for the server
# We use this type as a host id. There are two client host ids so we
# can model migration.


function version_used : version

after init {
    the_cid := 0x1; # zero length => 0x1 mvfst and other 0x0
    version_used := 0xff00001d;
}

object endpoint_id = {
    type this = {client, client_alt, server}
}

# An ip endpoint for the client to migrate to.

var client_alt : ip.endpoint

after init {
    client_alt := endpoint_id_addr(endpoint_id.client_alt)
}


# Map test endpoint ids to the ip endpoints

# parameter server_addr: ip.addr

# server_addr=0xc0a80101 client_addr=0xc0a80102

action endpoint_id_addr(ep_id : endpoint_id) returns(ep:ip.endpoint)= {
    ep.protocol := ip.udp;
    ep.addr := server_addr if ep_id = endpoint_id.server else 0;
    ep.port := server_port if ep_id = endpoint_id.server else 0;
}    

module quic_endpoint(ep_id) = {
    var ep : ip.endpoint
    var tls_id : tls_api.id
    var enc_level : quic_packet_type
    after init {
	    ep := endpoint_id_addr(ep_id);
        enc_level := quic_packet_type.initial;
    }
}
    
# create a client and server. the server has an instance of TLS
instance client : quic_endpoint(endpoint_id.client)
instance server : quic_endpoint(endpoint_id.server)

# An ip endpoint for the client to migrate to. TODO

# a socket for the server

var sock : net.socket

instance tls_extensions : vector(tls.extension)

# Open a server socket to listen on and create an instance of TLS.
# TODO: we should have one instance of TLS per connection

after init {
    sock := net.open(endpoint_id.server,server.ep);
    server.tls_id := 0;
}

# Here we have a bunch of conversions that map between cid's, IP
# endpoints, TLS instances and host ids. TODO: This is a mess and
# should be done in a more systematic way.

# Get the host id associated to an ip endpoint. 

action endpoint_to_pid(src:ip.endpoint) returns (pid:endpoint_id) = {
    pid := endpoint_id.server;
}

# Get the IP endpoint associated to a host id and socket number.

action socket_endpoint(host:endpoint_id,s:net.socket) returns (src:ip.endpoint) = {
    src := server.ep;
}
    
# Get the socket number associated to an IP endpoint.

action endpoint_to_socket(src:ip.endpoint) returns (socket:net.socket) = {
    socket := sock;
}

# Get the source IP endpoint associated to a TLS instance
# TODO: this shouldn't be needed.

action tls_id_to_src(tls_id:tls_api.id) returns (src:ip.endpoint) = {
    src := server.ep if tls_id = client.tls_id else client.ep;
}

# Get the destination IP endpoint associated to a TLS instance
# TODO: this shouldn't be needed.

action tls_id_to_dst(tls_id:tls_api.id) returns (dst:ip.endpoint) = {
    dst := client.ep if tls_id = client.tls_id else server.ep;
}

# Get cid associated to a TLS instance

action tls_id_to_cid(tls_id:tls_api.id) returns (scid:cid) = {
    scid := the_cid;
}

# Returns true if an IP endpoint is controlled by the generator.
# TODO: shouldn't be needed.

action dst_is_generated(dst:ip.endpoint) returns (res:bool) = {
    res := dst = server.ep
}

# Returns the TLS instance associated to a destination IP endppoint.
# TODO: shouldn't be needed.

action dst_tls_id(dst:ip.endpoint) returns (tls_id:tls_api.id) = {
    tls_id := server.tls_id
}


#
# Client HTTP response
# ===================
#
# Since we are testing an HTTP client, we need to make a sensible HTTP
# response, rather than just sendin random bytes, in order to get a response.
# Here, we read the HTTP response from a file:
#

# read a data file to send to client (it sends the same response to every request!)

var http_response : stream_data
instance http_response_file : binary_input_file(stream_data,cid)

after init {
    http_response := http_response_file.read;
}

# This selects the client's nonce CID

# after init {
#     nonce_cid(the_cid) := the_cid;
# }


# HACK: we fix the initial client transport parameters here

action make_transport_parameters returns (tp:quic_transport_parameters) = {
    var imsdbl : initial_max_stream_data_bidi_local;
    imsdbl.stream_pos_32 := random_stream_pos(1,0xFFFFFFF);
    var imd : initial_max_data;
    imd.stream_pos_32 := random_stream_pos(1,0xFFFFFFF);
    var it : max_idle_timeout;
    it.seconds_16 := random_microsecs(0,0xFFFFFFF);
    var imsdbr : initial_max_stream_data_bidi_remote;
    imsdbr.stream_pos_32 := random_stream_pos(1,0xFFFFFFF);
    var imsdu : initial_max_stream_data_uni;
    imsdu.stream_pos_32 := random_stream_pos(1,0xFFFFFFF);
    tp.transport_parameters := tp.transport_parameters.append(imsdbl);
    tp.transport_parameters := tp.transport_parameters.append(imd);
    tp.transport_parameters := tp.transport_parameters.append(it);
    tp.transport_parameters := tp.transport_parameters.append(imsdbr);
    tp.transport_parameters := tp.transport_parameters.append(imsdu);
    # TEMPORARY: a missing numeric parameter should be treated as zero,
    # but some clients don't handle this correctly, so we put all parameters in.
    # Remove the following to test this client behavior.
    var imsib : initial_max_stream_id_bidi;
    imsib.stream_id_16 := initial_max_streams_bidi;
    tp.transport_parameters := tp.transport_parameters.append(imsib);
    
    #if client_present_scid {
    var icid : initial_source_connection_id; #update v29
    icid.scid := the_cid;
    tp.transport_parameters := tp.transport_parameters.append(icid);
    #};
    var odci : original_destination_connection_id; #update v29
    odci.dcid := client_initial_dcid;
    tp.transport_parameters := tp.transport_parameters.append(odci);
}

attribute radix=16       # print in hex

#loval,highval,nbit
interpret cid -> longbv[1][13][10]
interpret version -> bv[32]
interpret pkt_num -> bv[32]
interpret error_code -> bv[16]
interpret stream_id -> bv[16]
attribute frame.idx.cardinality = 1
attribute frame.ack.range.idx.cardinality = 1
attribute pkt_num.cardinality = 1
attribute stream_pos.cardinality = 16
#attribute ip.addr.override = bv[1]
#attribute ip.port.override = bv[1]

action show_tls_send_event(src:ip.endpoint, dst:ip.endpoint, scid:cid, dcid:cid, data:stream_data,
                           pos:stream_pos, e:quic_packet_type) = {}

import show_tls_send_event

# Print a packet on stdout. In the compiled tester importing `show_packet`
# causes calls to be logged to stdout.

action show_packet(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet)
import show_packet

import action show_level_offset_length(e:quic_packet_type,offset:stream_pos,length:stream_pos)

import action clear_packet(rnum:pkt_num,pkt:stream_data)
import action cipher_packet(pkt:stream_data)

import action show_stream(pkt:stream_data)

import action show_aead(level:tls_api.upper.level,pyld:stream_data,seq:pkt_num,auth:stream_data)
