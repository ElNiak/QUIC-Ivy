#lang ivy1.7

include quic_shim

# The QUIC test shim
# ------------------


# Packet event shim
# -----------------
#
# When a packet even is generated, we encode the packet contents and
# route it to the network. The encoding involves serializing the packet
# to its byte-level representation, and then applying protection.
#
# TODO: We do not actually generate protection layer events. Instead,
# whenever a generated packet event occurs, we deterministically
# serialize and encrypt the packet for transmission. This is not quite sound,
# since in fact there are a few choices to be made in the encoding (such
# as the number of bytes in the sequence number encoding) and these choices
# should in principle be randomized. We have not done this, however, since we
# are more interested in the higher-layer aspects of the protocol.
#
# TODO: We don't coalesce multiple packets into a datagram. To do
# this, we could enqueue packets (as frames are enqueued) and then
# randomly choose the moment to encode them.
#
# Note: To encode the packet, we need a reference sequence number,
# which is the sequence number of the most recently transmitted packet
# on the same connection. This information is obtained from the protocol
# state by the procedure `reference_pkt_num`.
#
# Note: We assume the each endpoint the tester can transmit on has been
# mapped to an open socket. This map is provided by `endpoint_to_socket`.
#

after packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
    if _generating {  # & ~conn_closed(pkt.the_cid)
        var spkt := pkt_serdes.to_bytes(pkt);
        var rnum := reference_pkt_num(spkt,false);
        var tls_id := src_tls_id(src);
        var ppkt := prot.encrypt(tls_id,rnum,spkt);
        var pkts := prot.arr.empty;
        pkts := pkts.append(ppkt);
        call net.send(endpoint_to_pid(src),endpoint_to_socket(src),dst,pkts);
        # if multiple_client {
        #     if pkt.ptype = quic_packet_type.initial{
        #         var extns := tls_extensions.empty;
        #         var hand_extns := tls_hand_extensions.empty;
        #         extns := extns.append(make_transport_parameters2);
        #         call tls_api.upper.add_extensions(2,false,extns,hand_extns);
        #         call tls_api.upper.start_handshake(2);
        #         # var extns2 := tls_extensions.empty;
        #         # extns2 := extns2.append(make_transport_parameters2);
        #         # call tls_api.upper.create(2,false,extns2);  # false means this instance of tls is not a server
        #     };
        #     pkt.src_cid := 0x42;
        #     # pkt.dst_cid := 0x43;
        #     var spkt2 := pkt_serdes.to_bytes(pkt);
        #     var rnum2 := reference_pkt_num(spkt2,false);
        #     var tls_id2 : tls_api.id := 2;
        #     var ppkt2 := prot.encrypt(tls_id2,rnum2,spkt2);
        #     var pkts2 := prot.arr.empty;
        #     pkts2 := pkts2.append(ppkt2);
        #     call net.send(endpoint_to_pid(multiple_endpoint.second_client),endpoint_to_socket(multiple_endpoint.second_client),dst,pkts2);
        # };
    }
}


action make_transport_parameters2 returns (tp:quic_transport_parameters) = {
    var imsdbl : initial_max_stream_data_bidi_local;
    imsdbl.stream_pos_32 := max_stream_data;
    var imd : initial_max_data;
    imd.stream_pos_32 := random_stream_pos(1,0xFFFFFFF);
    var it : max_idle_timeout;
    it.seconds_16 := random_microsecs(0,0xFFFFFFF);
    var imsdbr : initial_max_stream_data_bidi_remote;
    imsdbr.stream_pos_32 := max_stream_data;
    var imsdu : initial_max_stream_data_uni;
    imsdu.stream_pos_32 := random_stream_pos(1,0xFFFFFFF);
    tp.transport_parameters := tp.transport_parameters.append(imsdbl);
    tp.transport_parameters := tp.transport_parameters.append(imd);
    tp.transport_parameters := tp.transport_parameters.append(it);
    tp.transport_parameters := tp.transport_parameters.append(imsdbr);
    tp.transport_parameters := tp.transport_parameters.append(imsdu);

    var icid : initial_source_connection_id; #TODO update v29
    icid.scid := 0x42;
    tp.transport_parameters := tp.transport_parameters.append(icid);

    var no_migration : disable_active_migration; #TODO update v29
    tp.transport_parameters := tp.transport_parameters.append(no_migration);

    var max_streams_bidi : initial_max_stream_id_bidi; #TODO update v29
    max_streams_bidi.stream_id_16 := random_stream_id(4,0xFFFFFFF);
    tp.transport_parameters := tp.transport_parameters.append(max_streams_bidi);
}

after packet_event_vn(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet_vn) {
    if _generating {  # & ~conn_closed(pkt.the_cid)
        var spkt := pkt_serdes_vn.to_bytes(pkt);
        # var rnum := reference_pkt_num(spkt,false);
        # var tls_id := dst_tls_id(dst);
        # var ppkt := prot.encrypt(tls_id,rnum,spkt); # no encryption ?
        var pkts := prot.arr.empty;
        pkts := pkts.append(spkt);
        call net.send(endpoint_to_pid(src),endpoint_to_socket(src),dst,pkts);
    }
}

after packet_event_retry(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet_retry) {
    if _generating {  # & ~conn_closed(pkt.the_cid)
        var spkt := pkt_serdes_retry.to_bytes(pkt);
        var pkts := prot.arr.empty;
        pkts := pkts.append(spkt);
        call net.send(endpoint_to_pid(src),endpoint_to_socket(src),dst,pkts);
    }
}

after packet_event_coal_0rtt(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet_coal_0rtt) {
    if _generating {  # & ~conn_closed(pkt.the_cid)
        var spkt := pkt_serdes_0rtt_coal.to_bytes(pkt);
        var pkts := prot.arr.empty;
        var tls_id := src_tls_id(src);
        var rnum := reference_pkt_num(spkt,false);
        var ppkt := prot.encrypt_rtt(tls_id,rnum,spkt);
        pkts := pkts.append(ppkt);
        call net.send(endpoint_to_pid(src),endpoint_to_socket(src),dst,pkts);
        zero_rtt_sent := true;
    }
}


after packet_event_0rtt(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet_0rtt) {
    if _generating {  # & ~conn_closed(pkt.the_cid)
        var spkt := pkt_serdes_0rtt.to_bytes(pkt);
        var pkts := prot.arr.empty;
        var tls_id := src_tls_id(src);
        var rnum := reference_pkt_num(spkt,false);
        var ppkt := prot.encrypt_rtt(tls_id,rnum,spkt);
        pkts := pkts.append(ppkt);
        call net.send(endpoint_to_pid(src),endpoint_to_socket(src),dst,pkts);
        zero_rtt_sent := true;
    }
}

