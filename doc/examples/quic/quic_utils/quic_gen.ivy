#lang ivy1.7

include order
include quic_packet
include quic_connection
include quic_deser
include tls

# This is a generator for sequences of QUIC packet events. It produces random QUIC executions that are
# consistent with the spcification. The main purpose of this is to test the efficiency of the
# randomized symbolic execution process.

# Compile the generator like this:
#
#     ivyc target=test quic_gen.ivy
#
# Run it like this:
#
#     ./quic_gen
#
# 
#


# The wire specification monitors this action.

action packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) = {}

# This is a ghost action representing a TLS send event.

action tls_send_event(src:ip.endpoint,dst:ip.endpoint,pcid:cid,data:stream_data) = {}

# fix a single connection id

var the_cid : cid

after init {
    the_cid := 13;
}

object botan = {
    instance id : unbounded_sequence
    instance lower : tls_lower_intf(id,stream_data)
    instance upper : tls_intf(id,stream_pos,stream_data,lower)
}    

module quic_endpoint(addr,the_role) = {
    var ep : ip.endpoint
    var tls_id : botan.id
    after init {
	ep.protocol := ip.udp;
	ep.addr := addr;
	ep.port := 0;
    }
}
    
# create a client and a server endpoint, each with an instance of TLS

instance client : quic_endpoint(0,role.client)
instance server : quic_endpoint(1,role.server)

after init {
    client.tls_id := 0;
    server.tls_id := 1;
    call botan.upper.create(0,false);
    call botan.upper.create(1,true);
}

# Hook up tls to quic

implement botan.lower.send(tls_id:botan.id,bytes:stream_data) {
    if tls_id = client.tls_id {
	call tls_send_event(client.ep, server.ep, the_cid, bytes)
    };
    if tls_id = server.tls_id {
	call tls_send_event(server.ep, client.ep, the_cid, bytes)
    }
}

after tls_send_event(src:ip.endpoint, dst:ip.endpoint, pcid:cid, data : stream_data) {
    call show_tls_send_event(src,dst,pcid,data);
}

# TLS reveive event handling
#
# When TLS data is received, we route it to the appropriate instance of TLS (that
# is, either the server or client TLS, depending on the destination endpoint).
#
# To reduce the noise, we restrict TLS messages to be only between our
# designated client and server and only for our designated cid. Also,
# we require that all of the received data (from stream_pos up to
# stream_length) is transferred to TLS, otherwise, the data will be
# dribbled one byte a a time, which gets boring.
#

around tls_recv_event(src:ip.endpoint, dst:ip.endpoint, pcid:cid, lo : stream_pos, hi : stream_pos ) {
    require src = client.ep & dst = server.ep | src = server.ep & dst = client.ep;
    require pcid = the_cid;
    require hi = stream_length(dst,pcid,0)
    ...
    var tls_id := client.tls_id if dst = client.ep else server.tls_id;
    var data := stream_data.empty;
    var idx := lo;
    while idx < hi {
	data := data.append(stream_app_data(dst,pcid,0).value(idx));
	idx := idx.next
    };
    call botan.lower.recv(tls_id,data)
}
    
before frame.stream.handle(f:frame.stream,src:ip.endpoint,dst:ip.endpoint,pcid:cid) {
    require src = client.ep & dst = server.ep | src = server.ep & dst = client.ep; 
    require pcid = the_cid;
    require f.length > 0;
    require f.offset = stream_length(dst,pcid,f.id);
    require f.length = (stream_app_data(dst,pcid,f.id).end) - f.offset;
    require ~f.fin;  # TODO: should allow fin after handshake is complete, or never?
}

# We export `packet_event` so the generator will produce random events.

#export frame.ack.handle
export frame.stream.handle
export packet_event
#export app_send_event
export tls_recv_event

attribute radix=16       # print in hex

interpret cid -> intbv[1][13][2]
interpret version -> bv[2]
interpret pkt_num -> bv[32]
interpret error_code -> bv[16]
interpret stream_id -> bv[3]
attribute frame.idx.cardinality = 1
attribute frame.ack.block.idx.cardinality = 1
attribute pkt_num.cardinality = 1
attribute ip.addr.override = bv[1]
attribute ip.port.override = bv[1]

action show_tls_send_event(src:ip.endpoint, dst:ip.endpoint, pcid:cid, data : stream_data) = {}

import show_tls_send_event
