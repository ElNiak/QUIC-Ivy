#lang ivy1.7

include quic_types

action random_stream_pos(min:stream_pos,max:stream_pos) returns (res:stream_pos)

action greater_stream_pos(min:stream_pos) returns (res:stream_pos)

action lower_stream_pos(max:stream_pos) returns (res:stream_pos)

implementation {
    implement random_stream_pos(min:stream_pos,max:stream_pos) {
       <<<
       srand((unsigned) time(0)); //fixed or random seed ?
       res = 0;
       res = ::random()% (max-min+1) + min;
       std::cerr << "between random: " << res << "\n";
       >>>
    }

    implement greater_stream_pos(min:stream_pos) {
       <<<
       srand((unsigned) time(0)); //fixed or random seed ?
       res = 0;
       res = ::random()%32767 + (min+1);
       std::cerr << "greater random: " << res << "\n";
       >>>
    }

    implement lower_stream_pos(max:stream_pos) {
       <<<
       res = 0;
       srand((unsigned) time(0)); //fixed or random seed ?
       res = ::random()%(max-1) + 0;
       std::cerr << "lower random: " << res << "\n";
       >>>
    }
}

action random_stream_data(min:stream_data,max:stream_data) returns (res:stream_data)

action greater_stream_data(min:stream_data) returns (res:stream_data)

action lower_stream_data(max:stream_data) returns (res:stream_data)

implementation {
    implement random_stream_data(min:stream_data,max:stream_data) {
       <<<
       // 128 + 38 bit = 2^166 value
       srand((unsigned) time(0)); //fixed or random seed ?
       res = 0;
       res = ::random()%(max-min+1) + min;
       std::cerr << "between random: " << res << "\n";
       >>>
    }

    implement greater_stream_data(min:stream_data) {
       <<<
       srand((unsigned) time(0)); //fixed or random seed ?
       res = 0;
       res = ::random()%32767 + (min+1);
       std::cerr << "greater random: " << res << "\n";
       >>>
    }

    implement lower_stream_data(max:stream_data) {
       <<<
       res = 0;
       srand((unsigned) time(0)); //fixed or random seed ?
       res = ::random()%(max-1) + 0;
       std::cerr << "lower random: " << res << "\n";
       >>>
    }
}

action random_microsecs(min:microsecs,max:microsecs) returns (res:microsecs)

action greater_microsecs(min:microsecs) returns (res:microsecs)

action lower_microsecs(max:microsecs) returns (res:microsecs)

implementation {
    implement random_microsecs(min:microsecs,max:microsecs) {
       <<<
       srand((unsigned) time(0)); //fixed or random seed ?
       res = 0;
       res = ::random()%(max-min+1) + min;
       std::cerr << "between random: " << res << "\n";
       >>>
    }

    implement greater_microsecs(min:microsecs) {
       <<<
       srand((unsigned) time(0)); //fixed or random seed ?
       res = 0;
       res = ::random()%32767 + (min+1);
       std::cerr << "greater random: " << res << "\n";
       >>>
    }

    implement lower_microsecs(max:microsecs) {
       <<<
       srand((unsigned) time(0)); //fixed or random seed ?
       res = 0;
       res = ::random()%(max-1) + 0;
       std::cerr << "lower random: " << res << "\n";
       >>>
    }
}

