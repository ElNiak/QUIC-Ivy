#lang ivy1.7

include quic_types

action random_stream_pos(min:stream_pos,max:stream_pos) returns (res:stream_pos)

action greater_stream_pos(min:stream_pos) returns (res:stream_pos)

action lower_stream_pos(max:stream_pos) returns (res:stream_pos)

implementation {
    implement random_stream_pos(min:stream_pos,max:stream_pos) {
       <<<
       srand((unsigned) time(0)); //fixed or random seed ?
       res = 0;
       res = ::rand()% (max-min+1) + min;
       std::cerr << "between random: " << res << "\n";
       >>>
    }

    implement greater_stream_pos(min:stream_pos) {
       <<<
       srand((unsigned) time(0)); //fixed or random seed ?
       res = 0;
       res = ::rand()%32767 + (min+1);
       std::cerr << "greater random: " << res << "\n";
       >>>
    }

    implement lower_stream_pos(max:stream_pos) {
       <<<
       res = 0;
       srand((unsigned) time(0)); //fixed or random seed ?
       res = ::rand()%(max-1) + 0;
       std::cerr << "lower random: " << res << "\n";
       >>>
    }
}

action random_stream_data(min:stream_pos,max:stream_pos,len:stream_pos) returns (res:stream_data)

implementation {
    implement random_stream_data(min:stream_pos,max:stream_pos,len:stream_pos) {
       <<<
       // 128 + 40 (38..) bit = 2^168 value = 21 bytes
       srand((unsigned) time(0)); //fixed or random seed ?
       res.resize(len);
       for (unsigned i = 0; i < len; i++) {
         res[len-i-1] =  0xff & ::rand()%(max-min+1) + min;
       }
       std::cerr << "between random: " << res << "\n";
       >>>
    }
}

action random_microsecs(min:microsecs,max:microsecs) returns (res:microsecs)

action greater_microsecs(min:microsecs) returns (res:microsecs)

action lower_microsecs(max:microsecs) returns (res:microsecs)

implementation {
    implement random_microsecs(min:microsecs,max:microsecs) {
       <<<
       srand((unsigned) time(0)); //fixed or random seed ?
       res = 0;
       res = ::rand()%(max-min+1) + min;
       std::cerr << "between random: " << res << "\n";
       >>>
    }

    implement greater_microsecs(min:microsecs) {
       <<<
       srand((unsigned) time(0)); //fixed or random seed ?
       res = 0;
       res = ::rand()%32767 + (min+1);
       std::cerr << "greater random: " << res << "\n";
       >>>
    }

    implement lower_microsecs(max:microsecs) {
       <<<
       srand((unsigned) time(0)); //fixed or random seed ?
       res = 0;
       res = ::rand()%(max-1) + 0;
       std::cerr << "lower random: " << res << "\n";
       >>>
    }
}

