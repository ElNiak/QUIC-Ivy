#lang ivy1.7
# Deserializer for TLS records
include tls_record
object tls_deser = {}
object tls_ser = {}
object tls_ser_server = {}
<<< member
    class `tls_deser`;
    class `tls_ser`;
    class `tls_ser_server`;
>>>
<<< impl
    //https://tools.ietf.org/html/draft-thomson-quic-bit-grease-00
    //https://tools.ietf.org/id/draft-huitema-quic-ts-03.html
    #include "/home/chris/TVOQE_UPGRADE_27/QUIC-Ivy/doc/examples/quic/quic_utils/quic_ser_deser.h"
  

    //class `tls_deser` : public ivy_binary_deser_128 {
    class `tls_deser` : public ivy_binary_deser_256 {
    //class `tls_deser` : public ivy_binary_deser {
        int field_bytes;
        std::vector<unsigned> fence;
        int in_encrypted_extensions;

    public:

        //tls_deser(const std::vector<char> &inp) : ivy_binary_deser_128(inp) {
        tls_deser(const std::vector<char> &inp) : ivy_binary_deser_256(inp) {
        //tls_deser(const std::vector<char> &inp) : ivy_binary_deser(inp) {
            field_bytes = 2;
            in_encrypted_extensions = 0;
        }

        virtual bool more(unsigned bytes) {
            if (fence.size() > 0 && pos + bytes > fence.back()) {
                return false;
	    }
            //return ivy_binary_deser_128::more(bytes);
            return ivy_binary_deser_256::more(bytes);
            //return ivy_binary_deser::more(bytes);
        }
    
        virtual void open_field(const std::string &name) {
            std::cout << "deser-open_field: name : " << name << std::endl;  
            if (name == "random_bytes") { //28 bytes tls1.2, 32bytes tls1.3
                fence.push_back(pos+28);
                field_bytes = 1;
            }
            else if (name == "versions") {
                field_bytes = 4;
                //int128_t bytes = 0;
                int256_t bytes = 0;
                //long long bytes = 0;
                if (in_encrypted_extensions) {
                    getn(bytes,1);
                }
                fence.push_back(pos+bytes);
            }
            else if (tls_field_length_bytes_map.find(name) != tls_field_length_bytes_map.end()) {
                int length_field_bytes = tls_field_length_bytes_map[name];
                //int128_t bytes;
                int256_t bytes;
                //long long bytes;
                getn(bytes,length_field_bytes);
                fence.push_back(pos+bytes);
            }
            else if (fence.size() > 0) {
                unsigned b = fence.back();
                //std::cout << "4) pkt-pos =  " << b << std::endl; 
                fence.push_back(b);
            } 
            if (tls_field_bytes_map.find(name) != tls_field_bytes_map.end()) {
                field_bytes = tls_field_bytes_map[name];
            }
            if (name == "tls.encrypted_extensions") {
                in_encrypted_extensions = fence.size();
            }
        }

        virtual void close_field() {
            if (fence.size() == in_encrypted_extensions)
                in_encrypted_extensions = 0;
            if (fence.size() > 0)
                fence.pop_back();
        }

        virtual int open_tag(const std::vector<std::string> &tags) {
            std::cout << std::endl; 
	        //std::cout << "open_tag : " << tags << std::endl;  
            int bytes = 1;
            if (tls_tag_bytes_map.find(tags[0]) != tls_tag_bytes_map.end())   {
                bytes = tls_tag_bytes_map[tags[0]];
            }
            //int128_t tag;
            //int128_t tag_new;
            //uint128_t tag_final;
            int256_t tag;
            int256_t tag_new;
            uint256_t tag_final;
            //long long tag;
            //long long tag_new;
            //unsigned long long tag_final;
	        long long mask;
            getn(tag,bytes);
            std::cout << "tag v1: " << tag << std::endl;  

	        u_int tag_int = (u_int) tag;  //TODO change could be dangerous
            int tag_size = (tag_int >> 6) & ((1 << 2) -1);
            if(tag_size == 0) {
                tag_size = 1;
                mask = 0x3ff;
            } else if(tag_size == 1) {
                tag_size = 2;
                mask = 0x3fff;
            } else if(tag_size == 2) {
                tag_size = 4;
                mask = 0x3fffffff;
            } else if(tag_size == 3) {
                tag_size = 8;
                mask = 0x3fffffffffffffff;
            } 

            bool is_unknow = false;
            if(tag > 0x0f)
                    is_unknow = true;

            std::cout <<  "Tag size: " <<  tag_size << std::endl;
            //int128_t value_size = 0;
            int256_t value_size = 0;
	        //long long value_size = 0;
            if(((tag_size != bytes || is_unknow || tag == 0x1010 || tag == 0x0f || tag == 0x00 || tag == 0x0d) 
		        && tags[0] != "tls.unknown_extension")) { //|| tag == 0x0d
                tls_tag_bytes_map["unknown_transport_parameter"] = tag_size;
                pos -= bytes;

                bytes = tag_size;
                getn(tag_new,bytes);

                //unsigned long long tag_intt = (unsigned long long) tag_new; 
                //uint128_t tag_intt = (uint128_t) tag_new; 
                uint256_t tag_intt = (uint256_t) tag_new; 
                tag_final = (tag_intt & mask);
                
                getn(value_size,1);                
                pos -= 1;
                std::cout << "tag: " << tag << std::endl;  

                if(tag == 0x0f || tag == 0x00) {
                    tls_field_bytes_map["scid"] = value_size;
                }
                else if(tag == 0x0d) {
                    //int128_t value_size_pcid;	
                    int256_t value_size_pcid;	
                    //long long value_size_pcid;	
                    pos += 1;  // TP len
                    pos += 4;  // ipv4
                    pos += 2;  // port
                    pos += 16; // ipv6
                    pos += 2;  // port
                    getn(value_size_pcid,1);   
                    pos -= (4+2+16+2);    
                    pos -= 1;
                    //std::cout << "pcid: " << value_size_pcid << std::endl;     
                    //std::cout << "pref_add: " << (value_size_pcid+4+2+16+2+1+16) << std::endl;   
                    tls_field_bytes_map["pcid"] = value_size_pcid;
                }
                else if(tag == 0x1010) {
                    tls_field_bytes_map["dcid"] = value_size;
                } 
                else {
                    tls_field_bytes_map["unknown"] = value_size;
                }
            } else {
                tag_final = tag;
            }


	        //std::cout << "value_size: " << value_size << std::endl;
            //std::cout << "tag v2: " << tag_final << std::endl;
  
            for (int i = 0; i < tags.size(); i++) {
                if (tag_final == tls_tags_map[tags[i]]) {
                   open_field(tags[i]);
                   return i;
                }
            }
            for (int i = 0; i < tags.size(); i++) {
                if (-1 == tls_tags_map[tags[i]]) {
                    pos -= bytes; // leave the unknown tag to parse again
                    open_field(tags[i]);
                    return i;
                }
            }
            for (int i = 0; i < tags.size(); i++) {
                if (-2 == tls_tags_map[tags[i]]) {
                    open_field(tags[i]);
                    return i;
                }
            }
            std::cout << "error tls_desert 1" << std::endl;  
            throw deser_err();
        }

        virtual void close_tag() {
            close_field();
        }

        //virtual void get(int128_t &res) {
        virtual void get(int256_t &res) {
        //virtual void get(long long &res) {
            if (field_bytes == -1) get_var_int(res);
            else getn(res,field_bytes);
        }

        //void get_var_int(int128_t &res) {
        //void get_var_int(long long &res) {
        void get_var_int(int256_t &res) {
            static int lens[4] = {0,1,3,7};
            //int128_t lobyte;
            int256_t lobyte;
            //long long lobyte;
            //ivy_binary_deser_128::getn(lobyte,1);
            ivy_binary_deser_256::getn(lobyte,1);
            //ivy_binary_deser::getn(lobyte,1);
            int bytes = lens[(lobyte & 0xc0) >> 6];
            ivy_binary_deser_256::getn(res,bytes);
            //ivy_binary_deser_128::getn(res,bytes);
            //ivy_binary_deser::getn(res,bytes);
            res |= (lobyte & 0x3f) << (bytes << 3);
        }

        virtual bool open_list_elem() {
            if (fence.size() == 0) {  // tricky: see if input contains a full message
                if (!more(4)) {
                    return false;
                }
                unsigned len = (inp[pos+1] << 16) + (inp[pos+2] << 8) + inp[pos];
                return inp.size() >= pos + len + 4;
            }
            return more(1);
        }

        void close_list_elem() {}

        void open_list() {}
        void close_list() {}

        ~tls_deser(){}
    };

    //struct `tls_ser` : public ivy_binary_ser_128 {
    struct `tls_ser` : public ivy_binary_ser_256 {
    //struct `tls_ser` : public ivy_binary_ser {

        int field_bytes;
        //std::vector<uint128_t> field_start;
        //std::vector<uint128_t> field_length_bytes;
        std::vector<uint256_t> field_start;
        std::vector<uint256_t> field_length_bytes;
        //std::vector<unsigned long long> field_start;
        //std::vector<unsigned long long> field_length_bytes;
        int in_encrypted_extensions;

        tls_ser() {
            in_encrypted_extensions = 0;
        }

        /** 
          * Allocate memory for each transport parameters
          */
        virtual void open_field(const std::string &name) {
            int flb = 0;
            std::cout << "ser-open_field: name 1: " << name << std::endl;  
            if (name == "random_bytes") {
                field_bytes = 1;
            }
            else if (name == "versions") {
                field_bytes = 4;
                if (in_encrypted_extensions) {
                    flb = 1;
                    res.resize(res.size() + flb);
                }
            }
            else if (tls_field_length_bytes_map.find(name) != tls_field_length_bytes_map.end()) {
                flb = tls_field_length_bytes_map[name];
		        //std::cout << "ser-open_field: flb : " << flb << std::endl;
                res.resize(res.size() + flb);
            }

            field_start.push_back(res.size());
            field_length_bytes.push_back(flb);
            if (tls_field_bytes_map.find(name) != tls_field_bytes_map.end()) {
                field_bytes = tls_field_bytes_map[name];
		        //std::cout << "ser-open_field: name_field_bytes 1: " << field_bytes << std::endl;
            }   //else 
		        //std::cout << "ser-open_field: name_field_bytes 2: " << field_bytes << std::endl;
            if (name == "tls.encrypted_extensions") {
                in_encrypted_extensions = field_start.size();
            }
            //std::cout << "ser-open_field: field_bytes: " << field_bytes << std::endl;
            //std::cout << "ser-open_field: res.size() : " << res.size() << std::endl;
        }
        //TODO [xx]
        virtual void close_field() {
            if (field_start.size() == in_encrypted_extensions)
                in_encrypted_extensions = 0;
            // tricky -- go back and fill in the length bytes after the field is serialized
            int start = field_start.back();
            int end = res.size();
            int flb = field_length_bytes.back();
            std::vector<char> temp;
            temp.swap(res);
            int len = end-start;
            //std::cout << "ser-close_field: start : " << start << std::endl;
            //std::cout << "ser-close_field: end : " << end << std::endl;
            //std::cout << "ser-close_field: len : " << len << std::endl;
            //std::cout << "ser-close_field: flb : " << flb << std::endl;
            setn(len,flb);
            temp.swap(res); //[xx] remove
            std::copy(temp.begin(),temp.end(),res.begin()+start-flb); // [xx] remove
            field_start.pop_back();
            field_length_bytes.pop_back();
        }

        virtual void open_tag(int ivy_tag, const std::string &name) {
            int bytes = 1;
            if (tls_tag_bytes_map.find(name) != tls_tag_bytes_map.end())
                bytes = tls_tag_bytes_map[name];
            //int128_t tag = tls_tags_map[name];	
            //long long tag = tls_tags_map[name];	
            int256_t tag = tls_tags_map[name];	
            if (tag !=-1) 
                setn(tag,bytes); // var int ?	
	        if(const char* env_p2 = std::getenv("TEST_TYPE")) { 
                // because it seralize directly so we dont know the scid/dcid length
                // TODO maybe change and put the value directly in envvar
                std::cout << "TEST_TYPE " << env_p2 << std::endl;
                if(strcmp(env_p2, "client") == 0) {
                    if(const char* env_p3 = std::getenv("TEST_SCIL")) {
                        std::cout << "TEST_SCIL " << env_p3 << std::endl;
                        //tls_field_bytes_map["scid"] = atoi(env_p3);
                    }
                    if(const char* env_p3 = std::getenv("TEST_DCIL")) {
                        std::cout << "TEST_DCIL " << env_p3 << std::endl;
                        tls_field_bytes_map["dcid"] = atoi(env_p3);
                    }
                }
            }
            open_field(name);
        }

        virtual void close_tag() {
            close_field();
        }

        //void set(int128_t inp) {
        void set(int256_t inp) {
        //void set(long long inp) {
            if (field_bytes == -1) set_var_int(inp);
            else setn(inp,field_bytes);
        }

        //void set_var_int(int128_t res) {
        //    int128_t val = res & 0x3fffffffffffffff;
        void set_var_int(int256_t res) {
            int256_t val = res & 0x3fffffffffffffff;
        //void set_var_int(long long res) {
        //    long long val = res & 0x3fffffffffffffff;
            int bytecode = res <= 0x3f ? 0 : res <= 0x3fff ? 1 : res <= 0x3fffffff ? 2 : 3;
            int bytes = 1 << bytecode;
            val |= bytecode << ((bytes << 3) - 2);
            setn(val,bytes);
        }

        void open_list(int len) {
        }
    };

    struct `tls_ser_server` : public tls_ser {
        // This version of the serializer uses the server format. The only difference is
        // that the QUIC_extension structure has an extra field "versions".

        tls_ser_server() {
          in_encrypted_extensions = -1; 
        }
    
    };
>>>

<<< init
    
    tls_make_name_map(tls_field_length_bytes,tls_field_length_bytes_map);
    tls_make_name_map(tls_field_bytes,tls_field_bytes_map);
    tls_make_name_map(tls_tags,tls_tags_map);
    tls_make_name_map(tls_tag_bytes,tls_tag_bytes_map);

>>>
