#lang ivy1.7

object endpoint_id = {
    type this = {client, client_alt, client_vn, server, server_2, mim}
}

# We use this type as a host id. There are two client host ids so we
# can model migration.

action endpoint_id_addr(ep_id : endpoint_id) returns (ep:ip.endpoint) = {
    ep.protocol := ip.udp;
    ep.addr := server_addr if ep_id = endpoint_id.server | ep_id = endpoint_id.server_2  
                    else (server_addr if ep_id = endpoint_id.mim
                    else client_addr);   # the loop-back addr
    ep.port := client_port if ep_id = endpoint_id.client
               else (4444 if ep_id = endpoint_id.mim # TODO 
               else (client_port_alt if ep_id = endpoint_id.client_alt
               else (client_port_vn if ep_id = endpoint_id.client_vn
               else (server_port_2 if ep_id = endpoint_id.server_2
               else server_port))));
}

module quic_endpoint(ep_id) = {
    var ep : ip.endpoint
    var tls_id : tls_api.id
    var enc_level : quic_packet_type
    after init {
        ep := endpoint_id_addr(ep_id);
        enc_level := quic_packet_type.initial;
    }

    # action set_ep(z : ip.endpoint) = {
    #     ep := z
    # }

    # action get_ep returns(z : ip.endpoint) = {
    #     z := ep
    # }

    # action set_tls_id(z : tls_api.id) = {
    #     tls_id := z
    # }

    # action get_tls_id returns(z : tls_api.id) = {
    #     z := tls_id
    # }

    # action set_enc_level(z : quic_packet_type) = {
    #     enc_level := z
    # }

    # action get_enc_level returns(z : quic_packet_type) = {
    #     z := enc_level
    # }
}